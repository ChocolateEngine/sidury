/*
 * THIS FILE HAS BEEN AUTOGENERATED FOR USE BY /home/karl/Desktop/Git-Repos/sidury/src/game/shims.h
 *
 * PLEASE DO NOT TOUCH, THINGS MAY NOT WORK AS INTENDED
 */
#include <dlfcn.h>
#include <stdio.h>

#include "graphics/imaterialsystem.h"
#include <SDL2/SDL.h>
#include "graphics/igraphics.h"
#include "iaudio.h"
#include "util.h"

/* REQUIRED FOR aduio.so FUNCTIONS  */
void *paduioPtrs[ 128 ];
/* REQUIRED FOR engine.so FUNCTIONS  */
void *penginePtrs[ 128 ];
/* REQUIRED FOR graphics.so FUNCTIONS  */
void *pgraphicsPtrs[ 128 ];

#define FUNC( p, i )           \
void ( *func )(  );            \
*( void** )( &func ) = p[ i ]; \
func(  );
/* GENERATE aduio.so SHIMS  */
int init_aduio_shims(  )
{
	void *p = dlopen( "bin/aduio.so", RTLD_LAZY );
	if ( !p )
		 return fprintf( stderr, "FATAL SHIM INIT ERROR: %s\n", dlerror(  ) );

	paduioPtrs[ 0 ] = dlsym( p, "AduioInit" );
	paduioPtrs[ 1 ] = dlsym( p, "LoadSound" );
	paduioPtrs[ 2 ] = dlsym( p, "PlaySound" );
	paduioPtrs[ 3 ] = dlsym( p, "FreeSound" );
	paduioPtrs[ 4 ] = dlsym( p, "AduioUpdate" );
	paduioPtrs[ 5 ] = dlsym( p, "SetListenerTransform" );
	paduioPtrs[ 6 ] = dlsym( p, "SetPaused" );

	return 0;
}

/* GENERATE engine.so SHIMS  */
int init_engine_shims(  )
{
	void *p = dlopen( "bin/engine.so", RTLD_LAZY );
	if ( !p )
		 return fprintf( stderr, "FATAL SHIM INIT ERROR: %s\n", dlerror(  ) );

	penginePtrs[ 0 ] = dlsym( p, "InitInput" );
	penginePtrs[ 1 ] = dlsym( p, "InputUpdate" );
	penginePtrs[ 2 ] = dlsym( p, "GetEvents" );
	penginePtrs[ 3 ] = dlsym( p, "RegisterKey" );
	penginePtrs[ 4 ] = dlsym( p, "GetMouseDelta" );
	penginePtrs[ 5 ] = dlsym( p, "WindowHasFocus" );
	penginePtrs[ 6 ] = dlsym( p, "KeyPressed" );
	penginePtrs[ 7 ] = dlsym( p, "KeyReleased" );
	penginePtrs[ 8 ] = dlsym( p, "KeyJustPressed" );
	penginePtrs[ 9 ] = dlsym( p, "KeyJustReleased" );

	return 0;
}

/* GENERATE graphics.so SHIMS  */
int init_graphics_shims(  )
{
	void *p = dlopen( "bin/graphics.so", RTLD_LAZY );
	if ( !p )
		 return fprintf( stderr, "FATAL SHIM INIT ERROR: %s\n", dlerror(  ) );

	pgraphicsPtrs[ 0 ] = dlsym( p, "LoadModel" );
	pgraphicsPtrs[ 1 ] = dlsym( p, "GetWindow" );
	pgraphicsPtrs[ 2 ] = dlsym( p, "SetView" );
	pgraphicsPtrs[ 3 ] = dlsym( p, "GetWindowSize" );
	pgraphicsPtrs[ 4 ] = dlsym( p, "DrawFrame" );
	pgraphicsPtrs[ 5 ] = dlsym( p, "Init" );
	pgraphicsPtrs[ 6 ] = dlsym( p, "GetMaterialSystem" );
	pgraphicsPtrs[ 7 ] = dlsym( p, "CreateModel" );
	pgraphicsPtrs[ 8 ] = dlsym( p, "IsConsoleShown" );
	pgraphicsPtrs[ 9 ] = dlsym( p, "DrawGui" );
	pgraphicsPtrs[ 10 ] = dlsym( p, "ShowConsole" );
	pgraphicsPtrs[ 11 ] = dlsym( p, "DebugMessage" );
	pgraphicsPtrs[ 12 ] = dlsym( p, "InsertDebugMessage" );

	return 0;
}

extern "C"
{
	 void LoadModel(  const char* p0,  const char* p1,  Model*  p2 )
	{
		 void ( *func )(  const char*,  const char*,  Model*  );
		*( void** )( &func ) = pgraphicsPtrs[ 0 ];
		func( p0, p1, p2 );
	}
	 SDL_Window* GetWindow(  )
	{
		 SDL_Window* ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 1 ];
		func(  );
	}
	 void SetView(  View*  p0 )
	{
		 void ( *func )(  View*  );
		*( void** )( &func ) = pgraphicsPtrs[ 2 ];
		func( p0 );
	}
	 void GetWindowSize(  uint32_t* p0,  uint32_t*  p1 )
	{
		 void ( *func )(  uint32_t*,  uint32_t*  );
		*( void** )( &func ) = pgraphicsPtrs[ 3 ];
		func( p0, p1 );
	}
	 void DrawFrame(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 4 ];
		func(  );
	}
	 void Init(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 5 ];
		func(  );
	}
	 IMaterialSystem* GetMaterialSystem(  )
	{
		 IMaterialSystem* ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 6 ];
		func(  );
	}
	 Model* CreateModel(  )
	{
		 Model* ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 7 ];
		func(  );
	}
	 bool IsConsoleShown(  )
	{
		 bool ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 8 ];
		func(  );
	}
	 void DrawGui(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 9 ];
		func(  );
	}
	 void ShowConsole(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = pgraphicsPtrs[ 10 ];
		func(  );
	}
	 void DebugMessage(  size_t p0,  const char* p1,  ... )
	{
		va_list args;
		va_start( args, p1 );
		 void ( *func )(  size_t,  const char*,  ...  );
		*( void** )( &func ) = pgraphicsPtrs[ 11 ];
		func( p0, p1, vstring( p1, args ).c_str(  ) );
	}
	 void InsertDebugMessage(  size_t p0,  const char* p1,  ... )
	{
		va_list args;
		va_start( args, p1 );
		 void ( *func )(  size_t,  const char*,  ...  );
		*( void** )( &func ) = pgraphicsPtrs[ 12 ];
		func( p0, p1, vstring( p1, args ).c_str(  ) );
	}
	 void AduioInit(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = paduioPtrs[ 0 ];
		func(  );
	}
	 bool LoadSound(  const char* p0,  AudioStream**  p1 )
	{
		 bool ( *func )(  const char*,  AudioStream**  );
		*( void** )( &func ) = paduioPtrs[ 1 ];
		func( p0, p1 );
	}
	 bool PlaySound(  AudioStream*  p0 )
	{
		 bool ( *func )(  AudioStream*  );
		*( void** )( &func ) = paduioPtrs[ 2 ];
		func( p0 );
	}
	 void FreeSound(  AudioStream**  p0 )
	{
		 void ( *func )(  AudioStream**  );
		*( void** )( &func ) = paduioPtrs[ 3 ];
		func( p0 );
	}
	 void AduioUpdate(  float  p0 )
	{
		 void ( *func )(  float  );
		*( void** )( &func ) = paduioPtrs[ 4 ];
		func( p0 );
	}
	 void SetListenerTransform(  const glm::vec3* p0,  const glm::vec3*  p1 )
	{
		 void ( *func )(  const glm::vec3*,  const glm::vec3*  );
		*( void** )( &func ) = paduioPtrs[ 5 ];
		func( p0, p1 );
	}
	 void SetPaused(  bool  p0 )
	{
		 void ( *func )(  bool  );
		*( void** )( &func ) = paduioPtrs[ 6 ];
		func( p0 );
	}
	 void InitInput(  )
	{
		 void ( *func )(  );
		*( void** )( &func ) = penginePtrs[ 0 ];
		func(  );
	}
	 void InputUpdate(  float  p0 )
	{
		 void ( *func )(  float  );
		*( void** )( &func ) = penginePtrs[ 1 ];
		func( p0 );
	}
        std::vector< SDL_Event >* GetEvents(  )
	{
		 const std::vector< SDL_Event >* ( *func )(  );
		*( void** )( &func ) = penginePtrs[ 2 ];
		func(  );
	}
	 void RegisterKey(  SDL_Scancode  p0 )
	{
		 void ( *func )(  SDL_Scancode  );
		*( void** )( &func ) = penginePtrs[ 3 ];
		func( p0 );
	}
	 const glm::ivec2& GetMouseDelta(  )
	{
		 const glm::ivec2& ( *func )(  );
		*( void** )( &func ) = penginePtrs[ 4 ];
		func(  );
	}
	 bool WindowHasFocus(  )
	{
		 bool ( *func )(  );
		*( void** )( &func ) = penginePtrs[ 5 ];
		func(  );
	}
	 bool KeyPressed(  SDL_Scancode  p0 )
	{
		 bool ( *func )(  SDL_Scancode  );
		*( void** )( &func ) = penginePtrs[ 6 ];
		func( p0 );
	}
	 bool KeyReleased(  SDL_Scancode  p0 )
	{
		 bool ( *func )(  SDL_Scancode  );
		*( void** )( &func ) = penginePtrs[ 7 ];
		func( p0 );
	}
	 bool KeyJustPressed(  SDL_Scancode  p0 )
	{
		 bool ( *func )(  SDL_Scancode  );
		*( void** )( &func ) = penginePtrs[ 8 ];
		func( p0 );
	}
	 bool KeyJustReleased(  SDL_Scancode  p0 )
	{
		 bool ( *func )(  SDL_Scancode  );
		*( void** )( &func ) = penginePtrs[ 9 ];
		func( p0 );
	}
}
